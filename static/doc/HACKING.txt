ZAMGER v4.3

Copyright (c) 2006-2016 Vedran Ljubovic i drugi
Elektrotehnicki fakultet Sarajevo


HACKING.TXT
===========

Posljednja izmjena: 11. 8. 2016.


Ukoliko želite da se uključite u razvoj Zamger projekta, molimo da se 
pridržavate sljedećih pravila, u suprotnom vaši patchevi neće biti 
primijenjeni, a Git commits će biti poništeni ma kako dobri bili.


1. OPŠTA PRAVILA IZGLEDA KODA:
- stil indentacije je "K&R style" 
	http://en.wikipedia.org/wiki/Indent_style#K.26R_style
- za indentaciju se koristi TAB (ASCII kod 9) a ne razmaci; ovo se odnosi 
i na ugnježdeni HTML i JavaScript; bonus bodovi za one koji postignu da 
i PHP i rezultujući HTML (view source) budu propisno indentovani :)
- koristi se UNIX standard novih redova (LF - ASCII kod 10)
- line wrapping (prelom linija znakom LF nakon nekog znaka, obicno 80-tog
u redu /kao u ovom fajlu/) se NE koristi - koristite editor koji podržava
Dynamic Word Wrap
- sav Zamger kod je pisan koristeći Unicode - koristite editor koji 
podržava Unicode
- ukratko, nemojte koristiti Notepad :-)
- imena varijabli, funkcija itd. su uvijek na našem, osim biblioteka koje
nisu dio Zamger projekta (npr. libvedran)
- neka daljnja pravila za imena varijabli i funkcija nisu data, koristite
zdrav razum
- komentari su uvijek na našem
- u komentarima se koriste afrikati (naša slova)
- koriste se "short open tags", odnosno nije potrebno navoditi php iza 
<? jer se podrazumijeva da je u pitanju jezik php što se vidi i iz 
ekstenzije, a teza da ovo uvodi nekompatibilnost sa XMLom je netačna,
može se uvijek napisati 
	print "<"."?xml";
osim toga u Zamgeru se ne koristi XML
- shodno tome, poželjno je pisati formu <?=$varijabla?> kad god je 
moguće
- autor Zamgera preferira print u odnosu na echo


2. ZAMGER NOMENKLATURA:
- imena modula su oblika kategorija/modul (možda ubuduće 
kategorija/podkategorija/modul)
- sve iznad je isključivo malim slovima
- SVE što se tiče jednog modula MORA SE NALAZITI U ISTOM TOM MODULU - 
nema pomoćnih fajlova
- KOMPLETAN sadržaj modula mora biti u funkciji koja se zove
   function kategorija_modul() 
(bez parametara); pogledajte API za spisak globalnih varijabli koje 
možete koristiti; ako modul koristi neke druge funkcije, i te funkcije
se trebaju nalaziti unutar glavne funkcije (to ponegdje u Zamgeru nije
slučaj ali će biti popravljeno)
- ako postoji nešto što koristi više modula, može se napraviti 
bibliotečni modul (lib/nesto), ali izbjegavajte to koliko možete
- u Zamgeru se ne koriste klase (OOP)


3. BAZA:
- počevši od Zamgera 4.3 koristi se InnoDB engine, a MyISAM je ostavljen
u pojedinim tabelama iz razloga performansi
- nazivi tabela i kolona su na našem jeziku, bez naših slova (jer ih 
mysql ne podržava u imenima tabela i kolona)
- sve je malim slovima
- primarni ključ u tabeli se uvijek zove "id", uvijek je INT veličine 11 
(maksimalna veličina)
- kod korištenja autoincrement polja imajte na umu njegove nedostatke
- strani ključ se uvijek zove kao tabela na koju se odnosi (bez dodataka 
tipa "fk_" "_id" i slično); nije dozvoljeno skraćivanje ili bilo kakva druga 
izmjena imena tabele u stranom ključu
- many-to-many relacije se zovu "prvatabela_drugatabela" a polja (strani 
ključevi) se zovu "prvatabela" i "drugatabela", eventualno se mogu 
dodati neka druga polja 
- ostala polja bi trebala imati kratka, jasna imena, bez skraćenica, 
dodataka i slično; pogledati postojeće tabele za primjere
- polje koje sadrži nekakvo ime elementa u tabeli se uvijek zove 
"naziv"; većina tabela bi trebala imati to polje
- obavezno je koristiti referencijalni integritet, strani ključevi moraju 
biti označeni kao takvi
- primarni ključ treba biti indeksiran, dodatne indekse kreirajte samo 
ako znate da će se time ubrzati određeni upiti
- Zamger *treba* raditi u "strict modu" MySQLa; ako neke stvari ne rade 
trenutno slobodno ih popravite


4. OBAVEZNO KORIŠTENJE FUNKCIJA
(za uputstva pogledajte odgovarajuci lib/ modul i doc/API.odt)
- za rad sa bazom *obavezno* je koristiti funkcije iz biblioteke dblayer!
Svi pozivi funkcija mysql_ ili myslqi ili PDO će biti obrisani. Za 
dokumentaciju najbolje je da otvorite lib/dblayer/mysqli.php i pročitate
komentare iznad imena funkcija.
- mada je poziv funkcije db_free_result (mysql_free_result itd.) preporučen
u PHP dokumentaciji, u Zamgeru se ne koristi iz razloga što se sve Zamger
skripte vrlo brzo završe i oslobode svu zauzetu memoriju; ako uočite da 
postoje problemi sa zauzećem memorije onda dodajte db_free_result
- koristiti funkciju zamgerlog2() što se više može (lib/zamger); radi 
konzistentnog ispisa u pozivima ove funkcije ne koristiti velika slova i 
naša slova
- za pozive modula koji mijenjaju nešto u bazi OBAVEZNO koristiti 
POST metodu, a za one koji samo biraju šta se prikazuje koristiti GET 
metodu
- kombinovanje GET i POST parametara u istom HTTP zahtjevu generalno nije 
baš pametno, a nije ni dobro podržano od strane raznih Zamger biblioteka
- kod kreiranja forme za POST možete koristiti metodu genform() ili ručno
ubaciti tokene (pogledajte kod funkcije genform u lib/libvedran da 
vidite kako)
- za obradu primljenih podataka koristite metode param i int_param da ne
biste morali pisati
	if (isset($_REQUEST['nesto'])) $nesto = $_REQUEST['nesto'];
sada pišete samo
	$nesto = param('nesto');
Koristite cjelobrojne parametre i int_param *kad god možete* jer se time
eliminiše ogroman broj potencijalnih napada na sistem. Ako baš morate 
primiti string parametar, *obavezno* pozovite funkciju db_escape prije 
nego što ga iskoristite u SQL upitu!
	$ime = param('ime');
	// $id = db_get("SELECT id FROM student WHERE ime='$ime'");
	// OVO IZNAD JE SQL INJECTION!
	$ime = db_escape($ime);
	$id = db_get("SELECT id FROM student WHERE ime='$ime'"); // ok!
- kod prijema podataka iz POST metode pozvati funkciju check_csrf_token 
i baciti grešku ako funkcija vrati false. Primjer:

$akcija = param('akcija');
if ($akcija=="brisi_sve_iz_baze") {
    if (!check_csrf_token()) {
        biguglyerror("Mrs odavle");
        zamgerlog("1337 h4x0r detected",3);
        return;
    }
    $q = myquery("truncate table modul");
} else {
    print genform("POST");
    print '<input type="submit" value="Kliknite ovdje da pobrišete sve 
podatke"></form>';
}



5. RAD SA REPOZITORIJEM:
- koristite atomic commits!
- obavezno pišite korisne poruke koje pomažu dokumentovanju koda



6. OSTALO:
- require() i eventualni CSS, JavaScript i slično po mogućnosti idu 
na početak modula, radi lakšeg uočavanja, ali idu unutar funkcije 
kako bi se izbjeglo da "slučajno" neko ne može nešto zločesto 
uraditi pristupajući modulu direktno kroz browser (npr. 
http://zamger.etf.unsa.ba/nastavnik/projekti.php ne bi trebalo raditi
ništa)
